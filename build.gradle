// 各プロジェクトの依存性管理情報の確認
// rootプロジェクト
// gradle -q dependencies
// サブプロジェクト
//gradle sample-*:dependencies



// プロダクトコードではなく、ビルドスクリプト( build.gradle )内で利用するプラグインや依存関係の定義については buildscript に定義
// https://qiita.com/hatimiti/items/a127311d739c9d3e0045#buildscript-プロパティ
buildscript {
    // 拡張プロパティの一括設定
    ext {
        // spring-boot-gradle-pluginのバージョンが古いため、Gradle7でビルドすると失敗するので
        // アップグレードする。
        // springBootVersion = "2.0.6.RELEASE"
        springBootVersion = "2.7.2"
        spockVersion = "1.2-groovy-2.5"
        // https://mvnrepository.com/artifact/org.codehaus.groovy/groovy-all
        groovyVersion = "3.0.10"
        // https://projectlombok.org/changelog
        lombokVersion = "1.18.24"
        dockerComposePluginVersion = "0.16.4"
    }

    // External dependencies for the build script
    // ビルドスクリプトで外部ライブラリを使用する場合はそのリポジトリとクラスパスを指定する。
    // https://docs.gradle.org/current/userguide/tutorial_using_tasks.html#sec:build_script_external_dependencies
    // OSSなどを利用する場合は、プロダクトコード同様に repositories と dependencies に定義。
    // https://qiita.com/hatimiti/items/a127311d739c9d3e0045#buildscript-プロパティ

    repositories {
        mavenCentral()
    }
    // ビルドスクリプトの依存性関係。プロダクトコードとは関係ない。
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "com.github.tntim96:fakesmtp:2.0" // ローカルでダミーのSMTPサーバーを立てる
        classpath "com.avast.gradle:gradle-docker-compose-plugin:${dockerComposePluginVersion}"
    }
}


// https://docs.gradle.org/current/dsl/org.gradle.api.Project.html
// https://docs.gradle.org/current/dsl/org.gradle.api.Project.html#org.gradle.api.Project:subprojects(groovy.lang.Closure)
// subprojects内の設定は各サブプロジェクト共通に適用される。
subprojects {

// subprojects内ではpluginsは使用できない模様。
//https://kazamori.jp/blogs/2020/06/30/gradle-multi-project/
//    plugins {
//        id 'application'
//        id 'groovy'
//        // http://gradle.monochromeroad.com/docs/userguide/idea_plugin.html
//        // IntelliJ IDEAが使用するファイルを生成し、プロジェクトをIDEA(File - Open Project)で開けるようにします。
//        id 'idea'
//        // http://gradle.monochromeroad.com/docs/userguide/eclipse_plugin.html
//        // eclipseのコンテナを指定するために使用。
//        id 'eclipse'
//        id 'org.springframework.boot'
//        // GradleでBOMを実現するためのもの。
//        // https://create-something.hatenadiary.jp/entry/2015/05/08/063000
//        id 'io.spring.dependency-management'
//    }
    // 代わりにapply pluginを使用する。
    apply plugin: "application"
    apply plugin: "groovy"
    apply plugin: "idea"
    apply plugin: "eclipse"
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"

// 古い記述としてコメント化
// apply plugin: "java"
// apply plugin: "groovy"
// apply plugin: "idea"
// apply plugin: "eclipse"
// apply plugin: "org.springframework.boot"
// apply plugin: "io.spring.dependency-management"

    // Javaのソースをコンパイルする際に使用するJavaのバージョン
    sourceCompatibility = 11
    targetCompatibility = 11
    // javaソースファイルのエンコードをutf-8にする。[]内は展開される。
    [compileJava, compileTestJava, compileGroovy, compileTestGroovy]*.options*.encoding = "UTF-8"
    // 警告表示を全て有効にする。
    // https://docs.oracle.com/javase/jp/11/tools/javac.html#GUID-AEEC9F07-CB49-4E96-8BC7-BCC2C7F725C9
    [compileJava, compileTestJava, compileGroovy, compileTestGroovy]*.options*.compilerArgs = ["-Xlint:all"]
    // コンパイル・実行時にソースファイルを指定。
    // Javaソースファイルとリソースファイルの指定が可能。
    // Javaプラグインは、mainとtestという二つの標準ソースセットを定義します。
    // mainソースセットは、コンパイルされJARファイルを構成する製品ソースコードを含みます。
    // testソースセットは、コンパイルされJUnitやTestNGで実行されるユニットテストコードを含みます。
    sourceSets {
        test.resources {
            // テスト時にsrc/main/resourcesにある設定ファイルを使用する
            srcDirs "src/main/resources"
            srcDirs "src/test/resources"
        }
    }

    repositories {
        mavenCentral()
        // jcenter()

        // jasperreports
        // https://b1san-blog.com/post/spring/spring-jasperreports/
        // maven { url "https://jasperreports.sourceforge.net/maven2/" }
        // ホスト先URLの変更。
        maven { url "https://jaspersoft.jfrog.io/jaspersoft/third-party-ce-artifacts/" }
    }

    dependencyManagement {
        imports {
            // https://spring.pleiades.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#managing-dependencies.dependency-management-plugin.using-in-isolation
            //
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        }
    }

    idea {
        // https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.idea.model.IdeaModule.html
        module {
            // if you love browsing Javadoc
            downloadJavadoc = true
            // //and love reading sources :)
            downloadSources = true
            // //if you prefer different output folders
            inheritOutputDirs = false
            // 出力先を指定。desctinationDirはdepricatedとなっている。他のして方法の検討が必要。
            // outputDir = compileJava.destinationDir
            // testOutputDir = compileTestJava.destinationDir
        }
    }
    // https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.eclipse.model.EclipseClasspath.html
    //
    eclipse {
        classpath {
            // コンテナを除外
            containers.remove("org.eclipse.jdt.launching.JRE_CONTAINER")
            // Java11用のコンテナを指定 if you want to append extra containers:
            containers "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-11"
        }
    }
    // アプリケーションを実行するbootRunタスクの設定の追加
    bootRun {
        sourceResources sourceSets.main
        jvmArgs "-XX:TieredStopAtLevel=1", "-Xverify:none"
    }
    // groovyバージョンの上書き
    ext["groovy.version"] = groovyVersion
    
    dependencies {
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        // アノテーションを利用するライブラリlombokの設定。
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"

        testImplementation "org.assertj:assertj-core"
        testImplementation "org.spockframework:spock-core:${spockVersion}"
        testImplementation "org.mockito:mockito-core"
    }
}
// メール送信テスト用SMTPの起動タスク
task startFakeSmtpServer(type: JavaExec) {
    classpath = buildscript.configurations.classpath
    args = ["--start-server", "-m"] // -m (memory-mode)
    // https://docs.gradle.org/7.4.2/dsl/org.gradle.api.tasks.JavaExec.html#org.gradle.api.tasks.JavaExec:main
    mainClass = "com.nilhcem.fakesmtp.FakeSMTP"
}

// pluginsブロックの前に記述できるスクリプトブロックは以下のみ
// buildscript {}, pluginManagement {} and other plugins {} script blocks
//plugins {
//    id 'docker-compose'
//}
// 代わりにapply pluginを使用する
apply plugin: "docker-compose"

dockerCompose {
    // 使用するdocker-composeのパスの指定。
    useComposeFiles = ["docker/docker-compose.yml"]
}

// pluginsブロックの前に記述できるスクリプトブロックは以下のみ
// buildscript {}, pluginManagement {} and other plugins {} script blocks
//plugins {
//    id 'com.sample.CodeGenPlugin'
//}
// 代わりにapply pluginを使用する
apply plugin: com.sample.CodeGenPlugin
// https://spring-boot-doma2-sample.readthedocs.io/ja/master/codegen.html

codegen {
    domainProjectName = "sample-domain"
    webProjectName = "sample-web-admin"

    commonDtoPackageName = "com.sample.domain.dto.common"
    daoPackageName = "com.sample.domain.dao"
    dtoPackageName = "com.sample.domain.dto"
    repositoryPackageName = "com.sample.domain.repository"
    servicePackageName = "com.sample.domain.service"
    commonServicePackageName = "com.sample.domain.service"
    exceptionPackageName = "com.sample.domain.exception"
    webBasePackageName = "com.sample.web.base"
    baseValidatorPackageName = "com.sample.domain.validator"
    baseControllerPackageName = "com.sample.web.base.controller.html"
    controllerPackageName = "com.sample.web.admin.controller.html"
}

// https://qiita.com/Yu-s/items/13a6a8db8dc191bb3b42
// task wrapper(type: Wrapper) {
//wrapper {
//    gradleVersion = "7.4.2"
//}

tasks.named('wrapper'){
    gradleVersion='7.4.2'
}